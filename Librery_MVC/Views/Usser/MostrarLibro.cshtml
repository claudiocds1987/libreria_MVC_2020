@model Librery_MVC.Models.Libro
@using Librery_MVC.Models
@using Librery_MVC.Services

@{
    Layout = "~/Views/Shared/_UsserLayout.cshtml";
    Autor autor = new Autor();
    Categoria category = new Categoria();
    Editorial editorial = new Editorial();
    AutorService sa = new AutorService();
    EditorialService es = new EditorialService();
    CategoriaService cs = new CategoriaService();

    autor = sa.getAutor(Model.IdAutor);
    category = cs.getCategoria(Model.IdCategoria);
    editorial = es.GetEditorial(Model.IdEditorial);

    TempData.Keep("ProductsAddedToShoppingCar");
}

<div class="row" id="div-row">

    <div class="col-md-4 contImgBook">

        <img src="/@Model.UrlImagen.Replace("\\", "/")" />       
        <a class="btn btn-primary" id="btn-volver" href="@Url.Action("index", "Usser")">Volver</a>
    
    </div>

    <div class="col-md-8 contInfo">

        <h2 class="text-center">@Model.Nombre</h2><br />
        <p>@Model.Descripcion</p>
        <label for="autor">Autor:</label>
        <span>@autor.Nombre</span><br />
        <label for="categoria">Categoria:</label>
        <span>@category.Nombre</span><br />
        <label for="editorial">Editorial:</label>
        <span>@editorial.Nombre</span><br />
        <label for="precio">Precio:</label>
        <span>$ @Model.Precio</span><br />
        <label for="cantidad">Cantidad disponible:</label>
        
        @if (Model.Cantidad == 0)
        {
            <span>NO HAY STOCK</span><br />
        }
        else
        {
            <span>@Model.Cantidad</span><br />
        }
      
        <hr />
        <button class="btn btn-default" onclick="addToShoppingCar();"><span class="glyphicon glyphicon-shopping-cart" id="glyphicon-shopping-cart" aria-hidden="true"></span>AGREGAR AL CARRITO</button>

    </div>

</div>

<script type="text/javascript">

    function addToShoppingCar() {

        let quantity =  @Html.Raw(Json.Encode(Model.Cantidad));

        if (quantity == 0) {
            alert('Lo sentimos!, No hay stock')
            return false;
        }


        var idBook = @Html.Raw(Json.Encode(Model.IdLibro)); 
        var acu = 1;  
        if (sessionStorage.getItem('booksToBuy') != null) {
            //Obtengo los idBook guardados en la sessionStorage                 
            myArray = JSON.parse(sessionStorage.getItem('booksToBuy'));                     
            //check si el libro ya fue elegido
            var exist = checkIdBook(idBook, myArray);

            if (!exist) {
               
                myArray.push(idBook);
                sessionStorage.setItem('booksToBuy', JSON.stringify(myArray));
                acu += parseInt(sessionStorage.getItem('ProductsAddedToShoppingCar'));
                sessionStorage.setItem('ProductsAddedToShoppingCar', acu);
                //aca muestro la cantidad de libros adheridos en el icono del carrito del navbar
                $('.shoppingCar').html(acu);
            }
            else {

                alert('El libro ya exite en el carrito!')
                return;
            }
          
        }
        else {
            //1er carga al carrito
            $('.shoppingCar').html(1);
            var myArray = [];
            myArray.push(idBook);
            //sessionStorage 'booksToBuy' guarda en un arrray los idBooks
            sessionStorage.setItem('booksToBuy', JSON.stringify(myArray));
            //sessionStorage 'ProductsAddedToShoppingCar' guarda la cantidad de books cargados en el carrito
            sessionStorage.setItem('ProductsAddedToShoppingCar', 1);
            
        }
              
    }

    function checkIdBook(idBook, array) {

        for (var i = 0; i < array.length; i++) {

            var id = array[i];

            if (idBook == id)
                return true;
        }

        return false;

    }


</script>


