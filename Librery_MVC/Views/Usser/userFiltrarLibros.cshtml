@model List<Librery_MVC.Models.Libro>
@using Librery_MVC.Models;
@using Librery_MVC.Services;

@{
    Layout = null;
    Autor autor = new Autor();
    Categoria category = new Categoria();
    Editorial editorial = new Editorial();
    AutorService sa = new AutorService();
    CategoriaService cs = new CategoriaService();
    EditorialService es = new EditorialService();
    List<Autor> autorList = new List<Autor>();
    List<Categoria> categoryList = new List<Categoria>();
    autorList = sa.ListAutores();
    categoryList = cs.getAllCategories();

    TempData.Keep("User");
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
</head>
<body>


    @if (ViewBag.Msg == null)
    {
        <h4>Resultados: @Model.Count</h4>
    }


    <div class="table-responsive" id="tableResponsive">
        <table class="table table-striped table-primary mt-5 table-bordered" id="myTable">
            <thead>
                <tr>
                    <th class="text-center">Imagen</th>
                    <th class="text-center">Id</th>
                    <th class="text-center">Nombre</th>
                    <th class="text-center">Autor</th>
                    <th class="text-center">Categoria</th>
                    <th class="text-center">Precio</th>
                    <th class="text-center">Accion</th>
                </tr>
            </thead>
            <tbody>

                @if (ViewBag.Msg != null)
                {
                    <tr>
                        <td colspan="6" style="color:red">
                            <h5 style="color:red">@ViewBag.Msg</h5>
                        </td>
                    </tr>
                }

                else if (Model.Count() == 0)
                {
                    <tr>
                        <td colspan="6" style="color:red">
                            No se encontraron resultados
                        </td>
                    </tr>
                }
                else
                {
                    foreach (Libro item in Model)
                    {

                        autor = sa.getAutor(item.IdAutor);
                        editorial = es.GetEditorial(item.IdEditorial);
                        category = cs.getCategoria(item.IdCategoria);

                        <tr>
                            <td class="text-center"><img src="/@item.UrlImagen.Replace("\\", "/")" width="80" height="100" /></td>

                            <td class="text-center">@item.IdLibro</td>
                            <td class="col-md-2 text-center">@item.Nombre</td>
                            <td class="text-center">@autor.Nombre</td>
                            <td class="text-center">@category.Nombre</td>
                            <td class="text-center">@item.Precio</td>

                            @if (item.Cantidad == 0)
                            {
                                <td class="text-center">
                                    <span style="color:red">No hay stock</span>
                                </td>
                            }
                            else
                            {
                                <td class="text-center">
                                    <input type="hidden" name="inputText" id="inputText" value="@item.IdLibro" />
                                    @Html.ActionLink("Mostrar", "MostrarLibro", "Usser", new { idLibro = item.IdLibro }, new { @class = "btn btn-primary", @id = "btnMostrar_lb" })

                                    @if (TempData["User"] != null)
                                    {
                                        <button onclick="createTable('@item.IdLibro', '@item.Nombre');" class="btn btn-warning" id="btnAgregar">Seleccionar</button>
                                    }
                                    else
                                    {
                                        <button onclick="alert('Debe estar logeado para realizar esta acción')" class="btn btn-warning" id="btnAgregar">Seleccionar</button>
                                    }

                                </td>
                            }


                        </tr>
                    }
                }


            </tbody>
        </table>
    </div>


    <script>
        // PAGINATION
        //get the table element
        var $table = document.getElementById("myTable"),
            // number of rows per page
            $n = 4,
            // number of rows of the table
            $rowCount = $table.rows.length,
            // get the first cell's tag name (in the first row)
            $firstRow = $table.rows[0].firstElementChild.tagName,
            // boolean var to check if table has a head row
            $hasHead = ($firstRow === "TH"),
            // an array to hold each row
            $tr = [],
            // loop counters, to start count from rows[1] (2nd row) if the first row has a head tag
            $i, $ii, $j = ($hasHead) ? 1 : 0,
            // holds the first row if it has a (<TH>) & nothing if (<TD>)
            $th = ($hasHead ? $table.rows[(0)].outerHTML : "");
        // count the number of pages
        var $pageCount = Math.ceil($rowCount / $n);
        // if we had one page only, then we have nothing to do ..
        if ($pageCount > 1) {
            // assign each row outHTML (tag name & innerHTML) to the array
            for ($i = $j, $ii = 0; $i < $rowCount; $i++ , $ii++)
                $tr[$ii] = $table.rows[$i].outerHTML;
            // create a div block to hold the buttons
            $table.insertAdjacentHTML("afterend", "<div id='buttons'></div");
            // the first sort, default page is the first one
            sort(1);
        }

        // ($p) is the selected page number. it will be generated when a user clicks a button
        function sort($p) {
            /* create ($rows) a variable to hold the group of rows
            ** to be displayed on the selected page,
            ** ($s) the start point .. the first row in each page, Do The Math
            */
            var $rows = $th, $s = (($n * $p) - $n);
            for ($i = $s; $i < ($s + $n) && $i < $tr.length; $i++)
                $rows += $tr[$i];

            // now the table has a processed group of rows ..
            $table.innerHTML = $rows;
            // create the pagination buttons
            document.getElementById("buttons").innerHTML = pageButtons($pageCount, $p);
            // CSS Stuff
            document.getElementById("id" + $p).setAttribute("class", "active");
        }


        // ($pCount) : number of pages,($cur) : current page, the selected one ..
        function pageButtons($pCount, $cur) {
            /* this variables will disable the "Prev" button on 1st page
               and "next" button on the last one */
            var $prevDis = ($cur == 1) ? "disabled" : "",
                $nextDis = ($cur == $pCount) ? "disabled" : "",
                /* this ($buttons) will hold every single button needed
                ** it will creates each button and sets the onclick attribute
                ** to the "sort" function with a special ($p) number..
                */
                $buttons = "<input class='btnPage' type='button' value='&lt;&lt; Prev' onclick='sort(" + ($cur - 1) + ")' " + $prevDis + ">";
            for ($i = 1; $i <= $pCount; $i++)
                $buttons += "<input class='btnPage' type='button' id='id" + $i + "'value='" + $i + "' onclick='sort(" + $i + ")'>";
            $buttons += "<input class='btnPage' type='button' value='Next &gt;&gt;' onclick='sort(" + ($cur + 1) + ")' " + $nextDis + ">";
            return $buttons;
        }
    </script>




</body>
</html>
