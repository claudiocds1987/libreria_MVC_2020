@model List<Librery_MVC.Models.LightBook>
@using Librery_MVC.Models;
@using Librery_MVC.Services;


@{
    ViewBag.Title = "pruebalistar";
    Layout = "~/Views/Shared/_UsserLayout.cshtml";
    Autor autor = new Autor();
    Categoria category = new Categoria();
    Editorial editorial = new Editorial();
    AutorService sa = new AutorService();
    CategoriaService cs = new CategoriaService();
    EditorialService es = new EditorialService();
    List<Autor> autorList = new List<Autor>();
    List<Categoria> categoryList = new List<Categoria>();
    autorList = sa.ListAutores();
    categoryList = cs.getAllCategories();
    TempData.Keep("User");
  
}




<div class="row" id="row1">

    <div class="panel-body" id="filtro-panel-body">

        <div class="col-md-4 text-center">
            <label>Nombre de libro</label>
            <input class="form-control" id="nombreLibro" maxlength="80" placeholder="Ingrese nombre del libro" />
        </div>

        <div class="col-md-3 text-center">
            <label>Autor</label>
            <select name="ddlAutor" class="form-control inputFiltros" id="ddlAutor" onmousedown="if(this.options.length>5){this.size=5;}" onchange='this.size=0;' onblur="this.size=0;">

                @if (!String.IsNullOrEmpty(ViewBag.Autor))
                {
                    //para que no me quede el nombre del autor duplicado en el dropDownList de autores
                    for (int i = 0; i < autorList.Count; i++)
                    {
                        if (autorList[i].IdAutor.Equals(ViewBag.IdAut))
                        {
                            autorList.RemoveAt(i);
                            i--;
                        }
                    }

                    <option value=@ViewBag.IdAut>@ViewBag.Autor</option>
                    <option value="todos">Todos</option>
                    foreach (Autor item in autorList)
                    {
                        <option value=@item.IdAutor>@item.Nombre</option>
                    }

                }
                else
                {
                    <option value="todos">Todos</option>
                    foreach (Autor item in autorList)
                    {
                        <option value=@item.IdAutor>@item.Nombre</option>
                    }
                }


            </select>
        </div>

        <div class="col-md-3 text-center">
            <label>Categoria</label>
            <select name="ddlCategory" class="form-control inputFiltros" id="ddlCategory" onmousedown="if(this.options.length>5){this.size=5;}" onchange='this.size=0;' onblur="this.size=0;">

                @if (!String.IsNullOrEmpty(ViewBag.Categoria))
                {
                    //para que no me quede el nombre de la categoria duplicado en el dropDownList de categoria
                    for (int x = 0; x < categoryList.Count; x++)
                    {
                        if (categoryList[x].IdCategoria.Equals(ViewBag.IdCat))
                        {
                            categoryList.RemoveAt(x);
                            x--;
                        }
                    }

                    <option value=@ViewBag.IdCat>@ViewBag.Categoria</option>
                    <option value="todos">Todos</option>
                    foreach (Categoria item in categoryList)
                    {
                        <option value=@item.IdCategoria>@item.Nombre</option>
                    }

                }
                else
                {
                    <option value="todos">Todos</option>
                    foreach (Categoria item in categoryList)
                    {
                        <option value=@item.IdCategoria>@item.Nombre</option>
                    }
                }


            </select>
        </div>

        <div class="col-md-1 col-xs-4">
            <label>Desde: $</label>
            <input type="number" class="form-control" id="price1" />
        </div>

        <div class="col-md-1 col-xs-4">
            <label>Hasta: $</label>
            <input type="number" class="form-control" id="price2" />
        </div>

    </div>

    <div id="cont-btn_buscar">
        <button class="btn btn-default" id="btn_buscar" type="button" onclick="filtrar();"><span class="glyphicon glyphicon-search" id="glyphicon-search" aria-hidden="true"></span>Buscar</button>
    </div>

</div>

<div class="row" id="cont-libros">

    @*@foreach (LightBook item in Model)
    {       
       
        <div class="col-md-3 container-image text-center">

            <img src="~/@item.UrlImagen" alt="@item.Nombre">

            <div class="title-book text-center">

                <a href="@Url.Action("MostrarLibro", "Usser", new { idLibro = item.IdLibro})">
                    @item.Nombre (@item.AnioDeLanzamiento)
                </a>

            </div>

            <div class="price-book text-center">$@item.Precio</div>

        </div>
    }*@

</div>


@*@if (ViewBag.TotalPages > 1)
{
    
    <div class="text-center" id="cont-pagination-btns">

        @for (int i = 1; i <= @ViewBag.TotalPages; i++)
        {        
            <button type="button" value="@i" class="pagination-btns" onclick="sendToController(this);">@i</button>
        }

    </div>

}*@


<div id="caca">
    @*muestro los botones*@
</div>

<script type="text/javascript">

    //Obtengo la lista original de todos los libros de la db)
    var originalList = @Html.Raw(Json.Encode(ViewBag.OriginalList));

    //Obtengo el contenido de las ViewBag
    var totalBooks =  @Html.Raw(Json.Encode(ViewBag.TotalBooks));
    
    Paginar(originalList, 20, 1);

    function Paginar(originalList, booksxPage, numberPage) {

        //Cuento el total de libros que hay en la db
        var totalBooks = originalList.length;
        
        var pages = totalBooks % booksxPage; //obtengo el resto de la division

        if (pages != 0) // si de resto no da cero, es un numero decimal
        {
            //Math.ceil redondea hacia arriba ej 1,7 => lo redondeo a 2
            pages = Math.ceil(totalBooks / booksxPage);
        }
        else
            pages = totalBooks / booksxPage;

       
        var pos = [pages];
     
        var cont = 0;
        var hasta = 0;
        var librosAmostrar = 0;
        var desde = 0;
     

        //guardo en el vector las diferentes formas de iniciar el recorrido de la lista
        //segun la cantidad de booksxPage

        for (var i = 0; i < pages; i++)
        {
            if (i == 0) {
                
                pos.splice(0, 0, 0);//0: numero de indice, 0: elementos a borrar, 0: agrego un cero al array
                cont = booksxPage;
            }
            else {

                pos.splice(i, 0, cont);             
                cont += booksxPage;
                
                librosAmostrar = totalBooks - booksxPage;
            }
        }

        //determinando los indices para recorrer la lista
        if (numberPage == 1) {

            desde = pos[0];
            hasta = (desde + booksxPage) - 1;
        }

        else if (numberPage == pages) {

            desde = totalBooks - librosAmostrar;
            hasta = totalBooks - 1;
                              
        }

        else {

            desde = pos[numberPage - 1];
            hasta = (desde + booksxPage) - 1;
        }

        //funciona bien
        //for (var z = desde; z <= hasta; z++) {
        //    console.log(z, originalList[z].UrlImage);
        //}

        for (var z = desde; z <= hasta; z++) {

            var a = "<div class='col-md-3 container-image text-center'>";

            var b = "<img src='/" + originalList[z].UrlImagen + "' alt='" + originalList[z].Nombre + "'>";
            //var c = "<div class='title-book text-center'>";

            var f = "<div class='price-book text-center'>" + "$"+ originalList[z].Precio + "</div>";

            var g = "</div>";

            var data = a + b + f + g;
            
            $('#cont-libros').append(data);

        }



        //funcion que crea los botones
        buttonsPagination(pages);
    }
  
       

    

    function buttonsPagination(pages) {

        //Creando los botones del pagination
        if (pages > 1) {
            for (var d = 1; d <= pages; d++) {
                var button = "<button type=button value='" + d + "' class='pagination-btns' onclick='sendToController(this);'>" + d + "</button>"
                $('#caca').append(button);
            }

        }
    }


    function sendToController(page) {
       
        var originalList = @Html.Raw(Json.Encode(ViewBag.OriginalList));

        var numberPage = page.value;

        var uri = '@Url.Action("paginar", "Usser")';

        $.ajax({
            url: uri,
            data: { numberPage: numberPage, originalList: originalList },
            type: 'POST',
            success: function (respuestaDelServidor) {
                $("#cont-libros").html(respuestaDelServidor);
            }
        });
    }

    function filtrar() {

        var uri = '@Url.Action("userFiltrarLibros", "Usser")';
        var nombre = $('#nombreLibro').val();
        var autor = $('#ddlAutor').val();
        var categoria = $('#ddlCategory').val();

        var price1 = $('#price1').val();
        var price2 = $('#price2').val();

        var filtros = new Array();
        filtros.push(nombre);
        filtros.push(autor);
        filtros.push(categoria);
        filtros.push(price1);
        filtros.push(price2);

        $.ajax({
            url: uri,
            data: { data: filtros },
            type: 'POST',
            success: function (respuestaDelServidor) {
                $("#cont-libros").html(respuestaDelServidor);
            }
        });

    }

   
</script>

<script type="text/javascript">

   window.addEventListener("load", Paginar, false);

</script>
